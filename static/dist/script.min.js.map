{"version":3,"sources":["script.js"],"names":["timerInterval","stage","drawHangman","parts","element","document","getElementById","concat","part","index","classList","add","remove","setUsername","username","value","trim","method","headers","Content-Type","encodeURIComponent","then","response","json","body","data","showMessage","location","reload","message","clearInterval","fetch","startGame","updateGame","startTimer","timer","error","setTimeout","textContent","seconds","endGame","guess","guessInput","toLowerCase","match","includes","getHint","clearHistory","resetGame","text","color","messageEl","style","word_display","used_letters","score","undefined","hangman_stage","e","animation"],"mappings":"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","file":"script.min.js","sourcesContent":["let timerInterval = null;\r\n\r\nfunction drawHangman(stage) {\r\n    const parts = [\r\n        'base', 'pole', 'top', 'rope', 'head', \r\n        'body', 'left-arm', 'right-arm', 'left-leg', 'right-leg'\r\n    ];\r\n    parts.forEach((part, index) => {\r\n        const element = document.getElementById(`hangman-${part}`);\r\n        if (element) {\r\n            if (index < stage) {\r\n                element.classList.add('visible');\r\n            } else {\r\n                element.classList.remove('visible');\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction setUsername() {\r\n    const username = document.getElementById('usernameInput').value.trim();\r\n    if (username) {\r\n        fetch('/set_username', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n            body: `username=${encodeURIComponent(username)}`\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            showMessage(data.message, '#4caf50');\r\n            location.reload();\r\n        })\r\n        .catch(error => showMessage('Error setting username', '#ef5350'));\r\n    } else {\r\n        showMessage('Please enter a username', '#ef5350');\r\n    }\r\n}\r\n\r\nfunction startGame() {\r\n    clearInterval(timerInterval);\r\n    fetch('/start', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n        body: `category=${encodeURIComponent(document.getElementById('category').value)}&difficulty=${encodeURIComponent(document.getElementById('difficulty').value)}`\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        updateGame(data);\r\n        startTimer(data.timer);\r\n        document.getElementById('wordDisplay').classList.add('reveal');\r\n        setTimeout(() => document.getElementById('wordDisplay').classList.remove('reveal'), 500);\r\n    })\r\n    .catch(error => showMessage('Error starting game', '#ef5350'));\r\n}\r\n\r\nfunction startTimer(seconds) {\r\n    document.getElementById('timer').textContent = `Time Left: ${seconds}s`;\r\n    timerInterval = setInterval(() => {\r\n        seconds--;\r\n        document.getElementById('timer').textContent = `Time Left: ${seconds}s`;\r\n        if (seconds <= 0) {\r\n            clearInterval(timerInterval);\r\n            endGame('Timeâ€™s up! You lost!');\r\n        }\r\n    }, 1000);\r\n}\r\n\r\nfunction makeGuess() {\r\n    const guessInput = document.getElementById('guessInput');\r\n    const guess = guessInput.value.trim().toLowerCase();\r\n    \r\n    // Client-side validation\r\n    if (!guess.match(/^[a-z]$/)) {\r\n        showMessage('Please enter a single letter (a-z)', '#ef5350');\r\n        guessInput.value = '';\r\n        return;\r\n    }\r\n\r\n    fetch('/guess', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n        body: `guess=${encodeURIComponent(guess)}`\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        guessInput.value = '';\r\n        updateGame(data);\r\n        if (data.message.includes('Good')) {\r\n            document.getElementById('wordDisplay').classList.add('reveal');\r\n            setTimeout(() => document.getElementById('wordDisplay').classList.remove('reveal'), 500);\r\n        }\r\n        if (data.message.includes('won') || data.message.includes('lost')) {\r\n            clearInterval(timerInterval);\r\n        }\r\n    })\r\n    .catch(error => showMessage('Error making guess', '#ef5350'));\r\n}\r\n\r\nfunction getHint() {\r\n    fetch('/hint', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n        body: ''\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        updateGame(data);\r\n        if (data.message.includes('Hint')) {\r\n            document.getElementById('wordDisplay').classList.add('reveal');\r\n            setTimeout(() => document.getElementById('wordDisplay').classList.remove('reveal'), 500);\r\n        }\r\n    })\r\n    .catch(error => showMessage('Error getting hint', '#ef5350'));\r\n}\r\n\r\nfunction clearHistory() {\r\n    fetch('/clear_history', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n        body: ''\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        showMessage(data.message, '#4caf50');\r\n        location.reload();\r\n    })\r\n    .catch(error => showMessage('Error clearing history', '#ef5350'));\r\n}\r\n\r\nfunction resetGame() {\r\n    startGame(); // Simply restart the game\r\n}\r\n\r\nfunction endGame(message) {\r\n    showMessage(message, '#ef5350');\r\n    setTimeout(() => location.reload(), 1500);\r\n}\r\n\r\nfunction showMessage(text, color) {\r\n    const messageEl = document.getElementById('message');\r\n    messageEl.textContent = text;\r\n    messageEl.style.color = color;\r\n}\r\n\r\nfunction updateGame(data) {\r\n    document.getElementById('wordDisplay').textContent = data.word_display || document.getElementById('wordDisplay').textContent;\r\n    document.getElementById('usedLetters').textContent = 'Used Letters: ' + (data.used_letters || '');\r\n    document.getElementById('message').textContent = data.message;\r\n    document.getElementById('score').textContent = `Score: ${data.score || 0}`;\r\n    if (data.hangman_stage !== undefined) {\r\n        drawHangman(data.hangman_stage);\r\n    }\r\n\r\n    const messageEl = document.getElementById('message');\r\n    if (data.message.includes('Good') || data.message.includes('Hint')) {\r\n        messageEl.style.color = '#4caf50';\r\n    } else if (data.message.includes('Wrong') || data.message.includes('lost')) {\r\n        messageEl.style.color = '#ef5350';\r\n    } else if (data.message.includes('won')) {\r\n        messageEl.style.color = '#0288d1';\r\n    } else {\r\n        messageEl.style.color = '#006064';\r\n    }\r\n}\r\n\r\n// Event Listeners\r\ndocument.getElementById('guessInput').addEventListener('keypress', function(e) {\r\n    if (e.key === 'Enter') makeGuess();\r\n});\r\n\r\ndocument.getElementById('category').style.animation = 'slideUp 0.5s ease-out';"]}